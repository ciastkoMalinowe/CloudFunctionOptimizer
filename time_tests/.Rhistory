setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.25/0.0_0.0/loss.csv",header = TRUE)
View(tasks)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=task)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.25/0.0_0.0/sdbcs.csv",header = TRUE)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.15/0.0_0.0/sdbcs.csv",header = TRUE)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.15/0.0_0.0/loss.csv",header = TRUE)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
#ggplot(tasks, aes(colour=resource)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + theme (axis.text.y = element_text(size=10)) + scale_color_continuous(name="", breaks = c(256, 512, 1024, 2048), labels = c(256, 512, 1024, 2048), low="blue", high="red")
#+ theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
#ggplot(tasks, aes(colour=task)) + geom_segment(aes(x=start, xend=end, y=machine, yend=machine), size=3) + xlab("Time in seconds") + ylab("Machine") + scale_y_discrete(labels=1:maxmachine) + theme (axis.text.y = element_text(size=10)) + theme(legend.justification=c(1,0), legend.position="right") + theme(legend.text = element_text(size = 8))
# ggsave("logs_real_3.pdf", width = 16, height = 24, units = "cm")
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.25/0.1_0.1/loss.csv",header = TRUE)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
#ggplot(tasks, aes(colour=resource)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + theme (axis.text.y = element_text(size=10)) + scale_color_continuous(name="", breaks = c(256, 512, 1024, 2048), labels = c(256, 512, 1024, 2048), low="blue", high="red")
#+ theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
tasks = read.table("./0.25/0.1_0.1/sdbcs.csv",header = TRUE)
tasks$start=(tasks$start)/1000
tasks$end=(tasks$end)/1000
tasks = tasks[order(tasks$start),]
tasks$machine = 0
maxmachine=1
for(i in 1:nrow(tasks))
{
st = tasks$start[i]
last_tasks = aggregate(end ~ machine, data = tasks, max)
busy = last_tasks[last_tasks$end < st & last_tasks$machine != 0,]
print(st)
print(busy)
if (nrow(busy)==0)
{
tasks$machine[i] = maxmachine
maxmachine = maxmachine+1
}
else tasks$machine[i] = busy$machine[1]
}
tasks
ggplot(tasks, aes(colour=function.)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + scale_y_discrete(labels=tasks$task) + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
# + geom_text(aes(x=time, y=id, label = task), color = "gray20", data = tasks)
# + theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
#ggplot(tasks, aes(colour=resource)) + geom_segment(aes(x=start, xend=end, y=1:nrow(tasks), yend=1:nrow(tasks)), size=2) + xlab("Time in seconds") + ylab("Task") + theme (axis.text.y = element_text(size=10)) + scale_color_continuous(name="", breaks = c(256, 512, 1024, 2048), labels = c(256, 512, 1024, 2048), low="blue", high="red")
#+ theme (axis.text.y = element_text(size=6)) + theme(legend.justification=c(1,0), legend.position=c(1,0)) + theme(legend.text = element_text(size = 8))
#ggplot(tasks, aes(colour=task)) + geom_segment(aes(x=start, xend=end, y=machine, yend=machine), size=3) + xlab("Time in seconds") + ylab("Machine") + scale_y_discrete(labels=1:maxmachine) + theme (axis.text.y = element_text(size=10)) + theme(legend.justification=c(1,0), legend.position="right") + theme(legend.text = element_text(size = 8))
# ggsave("logs_real_3.pdf", width = 16, height = 24, units = "cm")
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
results = read.table("./0.25/loss.csv",header = TRUE)
View(results)
loss = read.table("./0.25/loss.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbcs.csv",header = TRUE)
View(sdbcs)
loss$planned = (loss$budget_planned < loss$budget_calculated) && (loss$deadline_planned < loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned < sdbcs$budget_calculated) && (sdbcs$deadline_planned < sdbcs$deadline_calculated)
loss = read.table("./0.25/loss.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) && (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) && (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
View(loss)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated)
loss$planned = (loss$budget_planned <= loss$budget_calculated) && (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) && (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
sdbcs$deadline_planned = sdbcs$deadline_planned * 1.0
loss$planned = (loss$budget_planned <= loss$budget_calculated) && (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) && (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
View(sdbcs)
View(sdbcs)
View(loss)
View(sdbcs)
sdbcs$deadline_planned = sdbcs$deadline_planned * 1.0
View(sdbcs)
sdbcs$deadline_planned = sdbcs$deadline_planned - sdbcs$deadline_calculated
View(sdbcs)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) && (sdbcs$deadline_planned < 0)
View(sdbcs)
loss = read.table("./0.25/loss.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) && (loss$deadline_planned <= loss$deadline_calculated)
loss$planned = (loss$budget_planned <= loss$budget_calculated)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
p <- ggplot(loss, aes(budget, deadline))
p + geom_point(aes(colour = factor(planned)))
p
p <- ggplot(loss, aes(budget, deadline))
p + geom_point(aes(colour = planned))
p
ggplot(loss, aes(budget, deadline))
+ geom_point(aes(colour = planned))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('SDBCS + LOSS')
loss = read.table("./0.25/loss.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS')
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 2.0, by = 0.1)) +
scale_y_continuous(breaks = seq(0, 2.0, by = 0.1))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.01)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.01))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.02)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.02)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.05))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.05)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.15/loss.csv",header = TRUE)
sdbcs = read.table("./0.15/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBCS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBCS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.40/loss.csv",header = TRUE)
sdbcs = read.table("./0.40/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBCS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBCS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
loss = read.table("./0.25/loss.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbcs.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBCS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
sdbcs = read.table("./0.25/sdbws.csv",header = TRUE)
sdbcs = read.table("./0.40/sdbws.csv",header = TRUE)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
loss = read.table("./0.40/loss2.csv",header = TRUE)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.40/loss2.csv",header = TRUE)
sdbcs = read.table("./0.40/sdbws.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.40 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.25loss2.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbws.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.25/loss2.csv",header = TRUE)
sdbcs = read.table("./0.25/sdbws.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.25 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
setwd('/home/amnich/Documents/magisterka/CloudFunctionOptimizer/time_tests')
library('ggplot2')
loss = read.table("./0.15/loss2.csv",header = TRUE)
sdbcs = read.table("./0.15/sdbws.csv",header = TRUE)
loss$planned = (loss$budget_planned <= loss$budget_calculated) & (loss$deadline_planned <= loss$deadline_calculated)
sdbcs$planned = (sdbcs$budget_planned <= sdbcs$budget_calculated) & (sdbcs$deadline_planned <= sdbcs$deadline_calculated)
ggplot(loss, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBWS + LOSS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
ggplot(sdbcs, aes(budget, deadline)) +
geom_point(aes(colour = planned)) +
ggtitle('Montage 0.15 SDBWS') +
scale_x_continuous(breaks = seq(0, 0.2, by = 0.04)) +
scale_y_continuous(breaks = seq(0, 0.2, by = 0.02))
