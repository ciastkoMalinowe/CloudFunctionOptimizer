Dag path: ../dags/dag-aws-with-id.json
Logs dir is: ../all
Provider: AWS
Function types : 256 512 1024 1536 2048 2560 3008
Executing workflow for type: 256
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 256 1
Saving to ./../all/logs_256_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 512
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 512 1
Saving to ./../all/logs_512_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 1024
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 1024 1
Saving to ./../all/logs_1024_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 1536
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 1536 1
Saving to ./../all/logs_1536_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 2048
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 2048 1
Saving to ./../all/logs_2048_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 2560
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 2560 1
Saving to ./../all/logs_2560_1.txt
Workflow finished! Parsing response...
Executing workflow for type: 3008
./run_workflow.sh ../dags/dag-aws-with-id.json ./../all AWS 3008 1
Saving to ./../all/logs_3008_1.txt
Workflow finished! Parsing response...
Normalize timestamps
node ../dagscripts/normalizer.js ../all/parsed ./../all/logs_parsed.csv
Logs parsed! Output file is: ./../all/logs_parsed.csv
Preparing dbws dag...
./run_dbws.sh ../dags/dag-aws-with-id.json ./../all/logs_parsed.csv ./../all/dag-dbws.json
args: ../dags/dag-aws-with-id.json ./../all/logs_parsed.csv ./../all/dag-dbws.json
Will decorate with times
node ../dagscripts/time-decorator.js ../dags/dag-aws-with-id.json ./../all/logs_parsed.csv ./tmp-times.json
DAG file path is ../dags/dag-aws-with-id.json
CSV file path is ./../all/logs_parsed.csv
Decorated with times
node --harmony ../app.js ./tmp-times.json ./../all/dag-dbws.json
Starting Application
Configuration {"budgetParameter":0.3,"deadlineParameter":0.7,"functionTypes":["256","512","1024","1536","2048","2560","3008"],"overhead":0.043,"prices":{"256":4.17e-7,"512":8.34e-7,"1024":0.000001667,"1536":0.000002501,"2048":0.000003334,"2560":0.000004168,"3008":0.000004897}}
userDeadline: 46593.899999999994
userBudget: 0.0015734030999999997
Saved decorated DAG file as ./../all/dag-dbws.json
Dbws dag ready
DBWS dag done! Path to dag: ./../all/dag-dbws.json
./run_workflow.sh ./../all/dag-dbws.json ./../all AWS real 1
Saving to ./../all/logs_real_1.txt
Workflow finished! Parsing response...
Execution done!
Normalize real logs...
node ../dagscripts/normalizer.js ../all/parsed ./../all/logs_parsed_with_dbws.csv
Extracting times and prices...
./extract.sh ./../all/dag-dbws.json ./../all/logs_parsed_with_dbws.csv ./../all/dag-extracted.json ./../all/extracted_results.csv ./../all/dbws_planned_execution.csv
parameters: ./../all/dag-dbws.json ./../all/logs_parsed_with_dbws.csv ./../all/dag-extracted.json ./../all/extracted_results.csv ./../all/dbws_planned_execution.csv
node ../dagscripts/time-decorator.js ./../all/dag-dbws.json ./../all/logs_parsed_with_dbws.csv ./../all/dag-extracted.json
DAG file path is ./../all/dag-dbws.json
CSV file path is ./../all/logs_parsed_with_dbws.csv
../dagscripts/extractor.js ./../all/dag-extracted.json ./../all/extracted_results.csv ./../all/dbws_planned_execution.csv
Path to DAG is ./../all/dag-extracted.json
Output CSV path is ./../all/extracted_results.csv
Output timestamps CSV path is ./../all/dbws_planned_execution.csv
256 60330 0.000894048
512 32443 0.001015812
1024 19955 0.001168567
1536 21965 0.001703181
2048 14543 0.001640328
2560 18024 0.002304904
3008 20143 0.003158565
real 30552 0.001018803
sdbws 24087 0.00088539
Done! Extracted times and prices: ./../all/extracted_results.csv
Extracted planned dbws timestamps: ./../all/dbws_planned_execution.csv
Extracting real avg timestamps
node ../dagscripts/extract-real-avg.js ./../all/dag-extracted.json ./../all/real_avg_execution.csv
Path to DAG is ./../all/dag-extracted.json
DONE!